import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import LeaveOneOut, cross_val_score
from sklearn.metrics import mean_squared_error

# Load the data
data = {
    '_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
    'Land Type': [
        'Non-native Shrubland', 'Non-native Grassland', 'Non-native Forest',
        'Abandoned Agriculture', 'Low-Intensity Developed', 'Sparse/Unvegetated',
        'Native Shrubland', 'Non-Native Shrubland', 'Non-Native Grassland',
        'Non-Native Forest', 'Abandoned Agriculture', 'Developed',
        'Native Forest', 'Native Shrubland', 'Sparse Vegetation'
    ],
    'Acres': [1480, 4005, 400, 1000, 103, 46, 20, 3061, 13023, 1155, 2332, 948, 2440, 3729, 3828]
}
df = pd.DataFrame(data)

# One-hot encode the categorical feature
df_encoded = pd.get_dummies(df, columns=['Land Type'])

# Define X and y
X = df_encoded.drop(columns=['_id', 'Acres'])
y = df_encoded['Acres']

# Train a linear regression model
model = LinearRegression()
model.fit(X, y)
y_pred = model.predict(X)

# Visualize predictions vs actual
plt.figure(figsize=(10,6))
sns.barplot(x=y.values, y=df['Land Type'], color='lightblue', label='Actual')
sns.barplot(x=y_pred, y=df['Land Type'], color='orange', alpha=0.6, label='Predicted')
plt.xlabel('Acres Burned')
plt.title('Actual vs Predicted Acres Burned by Land Type')
plt.legend()
plt.tight_layout()
plt.show()

# Print MSE
mse = mean_squared_error(y, y_pred)
print(f"Mean Squared Error (MSE): {mse:.2f}")

# Save Graph Image
plt.savefig('regression_plot.png')  # This saves the image in the Codespace directory
plt.show()

# Create a DataFrame with predictions
df_results = pd.DataFrame({
    'Land Type': df['Land Type'],
    'Actual Acres': y,
    'Predicted Acres': y_pred,
    'Error': y - y_pred
})

# Save as a tab-separated .txt file
df_results.to_csv('regression_results.txt', sep='\t', index=False)

